version: "3.9"
services:
  nginx:
    build: web
    ports:
      - 8080:8080
    depends_on:
      - api
    healthcheck:
      test: curl -f http://nginx:8080
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    restart: always
    build: api
    ports:
      - 3000:3000
    environment:
      HOST: :3000
      POSTGRES_CONN: ${POSTGRES_CONN}
      JWT_SECRET: ${JWT_SECRET}
      RABBIT_MQ_CONN: ${RABBIT_MQ_CONN}
      IS_DEV: ${IS_DEV}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: curl -f http://chat-api:3000/api/healthcheck
      interval: 5s
      timeout: 5s
      retries: 5

  bot:
    restart: always
    build: 
      context: ./bot
      dockerfile: dockerfile
    environment:
      POSTGRES_CONN: ${POSTGRES_CONN}
      RABBIT_MQ_CONN: ${RABBIT_MQ_CONN}
      IS_DEV: ${IS_DEV}
    depends_on:
      rabbitmq:
        condition: service_healthy

  postgres:
    image: postgres:13.3
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11-management
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 5
